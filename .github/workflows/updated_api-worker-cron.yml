name: Main

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      api-image: ${{ steps.api-image.outputs.image }}
      worker-image: ${{ steps.worker-image.outputs.image }}
      cron-image: ${{ steps.cron-image.outputs.image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install

      - name: Install Nx
        run: pnpm add -D nx

      - name: Build API
        id: build-api
        run: |
          npx nx build api
          echo "API image=ghcr.io/${{ github.repository }}/api:latest" >> $GITHUB_ENV
          echo "::set-output name=image::ghcr.io/${{ github.repository }}/api:latest"

      - name: Build Worker
        id: build-worker
        run: |
          npx nx build worker
          echo "Worker image=ghcr.io/${{ github.repository }}/worker:latest" >> $GITHUB_ENV
          echo "::set-output name=image::ghcr.io/${{ github.repository }}/worker:latest"

      - name: Build Cron
        id: build-cron
        run: |
          npx nx build cron
          echo "Cron image=ghcr.io/${{ github.repository }}/cron:latest" >> $GITHUB_ENV
          echo "::set-output name=image::ghcr.io/${{ github.repository }}/cron:latest"

      - name: Save Docker images as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: docker-images
          path: |
            ./apps/api/Dockerfile
            ./apps/worker/Dockerfile
            ./apps/cron/Dockerfile

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Docker images artifacts
        uses: actions/download-artifact@v3
        with:
          name: docker-images

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image for API
        if: needs.build.outputs.api-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/api/Dockerfile.api
          push: true
          tags: ${{ needs.build.outputs.api-image }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Deploy API to DigitalOcean App Platform
        if: needs.build.outputs.api-image
        uses: digitalocean/app_action@v1.1.6
        with:
          app_name: joinvalley-v2-api
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Build and Push Docker Image for Worker
        if: needs.build.outputs.worker-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/worker/Dockerfile
          push: true
          tags: ${{ needs.build.outputs.worker-image }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Deploy Worker to DigitalOcean App Platform
        if: needs.build.outputs.worker-image
        uses: digitalocean/app_action@v1.1.6
        with:
          app_name: joinvalley-v2-worker
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Build and Push Docker Image for Cron
        if: needs.build.outputs.cron-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/cron/Dockerfile
          push: true
          tags: ${{ needs.build.outputs.cron-image }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Deploy Cron to DigitalOcean App Platform
        if: needs.build.outputs.cron-image
        uses: digitalocean/app_action@v1.1.6
        with:
          app_name: joinvalley-v2-cron
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

  notify-on-failure:
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    steps:
      - name: Send failure notification to Slack
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: "The GitHub Actions workflow for deploying the services has failed. Please check the logs for more details."
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

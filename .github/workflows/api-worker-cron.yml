name: Main

on:
  workflow_dispatch:
  push:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          docker-images: false

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Determine Affected Projects
        id: affected
        run: |
          npx nx print-affected --base=origin/main --head=$(git rev-parse HEAD) > affected.json
          cat affected.json
          if ! grep -q '"apps/api"' affected.json && ! grep -q '"apps/worker"' affected.json && ! grep -q '"apps/cron"' affected.json; then
            echo "Neither API, Worker, nor Cron are affected, skipping job."
            echo "::set-output name=skip::true"
          fi

      - name: Stop Job if No Relevant Changes
        if: steps.affected.outputs.skip == 'true'
        run: echo "Skipping job because neither API, Worker, nor Cron are affected"

      - name: Run Prisma migrations for API
        if: steps.affected.outputs.skip != 'true' && grep -q '"apps/api"' affected.json
        run: pnpm prisma:no-doppler migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Log in to GitHub Container Registry
        if: steps.affected.outputs.skip != 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        if: steps.affected.outputs.skip != 'true'
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        if: steps.affected.outputs.skip != 'true'
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and Push Docker Image for API
        if: steps.affected.outputs.skip != 'true' && grep -q '"apps/api"' affected.json
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/api/Dockerfile.api
          push: true
          tags: ghcr.io/${{ github.repository }}/api:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Deploy API to DigitalOcean App Platform
        if: steps.affected.outputs.skip != 'true' && grep -q '"apps/api"' affected.json
        uses: digitalocean/app_action@v1.1.6
        with:
          app_name: joinvalley-v2-api
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Build Worker into /dist
        if: steps.affected.outputs.skip != 'true' && grep -q '"apps/worker"' affected.json
        run: |
          echo "Building and pushing worker"
          pnpm dlx nx build worker

      - name: Build and Push Docker Image for Worker
        if: steps.affected.outputs.skip != 'true' && grep -q '"apps/worker"' affected.json
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/worker/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/worker:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Deploy Worker to DigitalOcean App Platform
        if: steps.affected.outputs.skip != 'true' && grep -q '"apps/worker"' affected.json
        uses: digitalocean/app_action@v1.1.6
        with:
          app_name: joinvalley-v2-worker
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Build Cron into /dist
        if: steps.affected.outputs.skip != 'true' && grep -q '"apps/cron"' affected.json
        run: |
          echo "Building and pushing cron"
          pnpm dlx nx build cron

      - name: Build and Push Docker Image for Cron
        if: steps.affected.outputs.skip != 'true' && grep -q '"apps/cron"' affected.json
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/cron/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/cron:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Deploy Cron to DigitalOcean App Platform
        if: steps.affected.outputs.skip != 'true' && grep -q '"apps/cron"' affected.json
        uses: digitalocean/app_action@v1.1.6
        with:
          app_name: joinvalley-v2-cron
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

  notify-on-failure:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: failure()
    steps:
      - name: Send failure notification to Slack
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: "The GitHub Actions workflow for deploying the services has failed. Please check the logs for more details."
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
